@page "/confirmation"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider provider
@inject IEventsService eventsService
@inject ILocalStorageService localStorage
@inject ICartService cartService
@inject IIdentityService identityService
@inject ICurrencyService currencyService

<h1 class="title">Thank you for your purchase!</h1>

<div class="fullscreen">
    <div class="background"></div>
    <img src="/Events.jpg" />
</div>

<p class="message">Your order has been successfully processed.</p>

<table class="table">
    <thead>
        <tr>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in boughtEvents)
        {
            <tr>
                <td>@item.Event.Name</td>
                <td>@item.Event.TicketPrice</td>
                <td>@item.Quantity</td>
                <td>@(decimal.Round((item.Event.TicketPrice * exchangeRate * item.Quantity), 2)) @currencyTitle</td>
            </tr>
        }
    </tbody>
</table>

<h3 class="total">Total: @boughtEvents.Sum(item => decimal.Round((item.Event.TicketPrice * exchangeRate * item.Quantity), 2)) @currencyTitle</h3>

<div id="button-container">
	<button class="btn btn-primary" @onclick="(() => GoToHome())">Continue</button>
</div>


<style>
    #button-container {
        display: flex;
        justify-content: center;
    }

    .title {
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 20px;
        color: #fbe89c;
        text-align: center;
    }

    .message {
        font-size: 24px;
        margin-bottom: 30px;
        color: #fbe89c;
        text-align: center;
    }

    .table {
        width: 100%;
        max-width: 1000px;
        margin: 0 auto;
        border-collapse: collapse;
        padding: 20px;
        background-color: rgba(0, 0, 0, 0.4);
        color: white;
    }

        .table th {
            text-align: left;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .table td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

    .total {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        color: #fbe89c;
    }

    .fullscreen img {
        object-fit: cover;
        width: 100vw;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        z-index: -1;
    }

    .fullscreen .background {
        background-color: #fbe89c;
        object-fit: cover;
        width: 100vw;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        z-index: -1;
    }
</style>

@code {
    private List<CartItemModel>? boughtEvents;

    private string currencyTitle;
    private decimal exchangeRate;

    protected override async Task OnInitializedAsync()
    {
        // Hämtar alla items i shoppingcart
        boughtEvents = cartService.GetShoppingCartItems();

        var authState = await provider.GetAuthenticationStateAsync();
        string loggedInUserUsername = authState.User.Identity.Name;
        string selectedCountry = await identityService.GetUserCountryAsync(loggedInUserUsername);

        if (selectedCountry != null)
        {
            //Hämta currency title från currencyService
            currencyTitle = currencyService.GetCurrencyTitle(selectedCountry);

            //if the method returns null exchangeRate defaults to 1
            exchangeRate = (await currencyService.GetExchangeRate(selectedCountry)) ?? 1;
        }

        // Clearar cookies
        await ClearCookies();
    }

    private async Task ClearCookies()
    {
        await localStorage.ClearAsync();
    }

    private void GoToHome()
    {
        navigationManager.NavigateTo($"/home");
    }
}
