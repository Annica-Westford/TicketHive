// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketHive.Server.Data;

#nullable disable

namespace TicketHive.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230403141537_SeededImages")]
    partial class SeededImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventModelUserModel", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EventModelUserModel");
                });

            modelBuilder.Entity("TicketHive.Shared.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFullyBooked")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2023, 12, 23, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Concert",
                            Image = "harrypotter",
                            IsFullyBooked = false,
                            Location = "Sweden",
                            MaxCapacity = 500,
                            Name = "Harry Potter In Concert",
                            TicketPrice = 450m
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2024, 3, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Convention",
                            Image = "bronycon",
                            IsFullyBooked = false,
                            Location = "Denmark",
                            MaxCapacity = 400,
                            Name = "BronyCon",
                            TicketPrice = 950m
                        },
                        new
                        {
                            Id = 3,
                            DateTime = new DateTime(2023, 5, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Games",
                            Image = "dndalbin",
                            IsFullyBooked = false,
                            Location = "Sweden",
                            MaxCapacity = 2,
                            Name = "D&D with Albin",
                            TicketPrice = 20m
                        },
                        new
                        {
                            Id = 4,
                            DateTime = new DateTime(2023, 7, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EventType = "Festival",
                            Image = "internetcatfest",
                            IsFullyBooked = false,
                            Location = "Poland",
                            MaxCapacity = 700,
                            Name = "Internet Cat Video Festival",
                            TicketPrice = 300m
                        });
                });

            modelBuilder.Entity("TicketHive.Shared.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventModelUserModel", b =>
                {
                    b.HasOne("TicketHive.Shared.EventModel", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketHive.Shared.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
