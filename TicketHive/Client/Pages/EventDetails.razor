@page "/eventdetails/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using TicketHive.Shared;
@attribute [Authorize]
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager
@inject IEventsService eventsService
@inject ILocalStorageService localStorage
@inject ICartService cartService
@inject ICurrencyService currencyService
@inject IIdentityService identityService

@if (selectedEvent != null)
{
    string eventImage = $"/Images/{selectedEvent.Image}.png";

    <div class="fullscreen">
        <div class="background"></div>
        <img src="/Events.jpg" />
    </div>

    <div class="container">
        <div class="row">
            <div class="col">
                <img class="event-image" src="@eventImage" alt="@selectedEvent.Name">
            </div>
        <div class="col" id="card">
            <h2 class="event-name">@selectedEvent.Name</h2>
            <p class="event-type">Event type: @selectedEvent.EventType</p>
            <p class="event-location">Location: @selectedEvent.Location</p>
            <p class="event-date">Date: @selectedEvent.DateTime.ToString("dddd, dd MMMM yyyy")</p>
            <p class="event-date">Date: @selectedEvent.DateTime.ToShortDateString()</p>
            <p class="event-date">Time: @selectedEvent.DateTime.ToShortTimeString()</p>
            <p class="event-description">@selectedEvent.Description</p>
            <p class="event-tickets-available">@(@selectedEvent.MaxCapacity - @selectedEvent.SoldTickets) / @selectedEvent.MaxCapacity tickets available</p>
            <p class="event-ticketprice">Price: @(decimal.Round(selectedEvent.TicketPrice * exchangeRate, 2)) @currencyTitle</p>
            <div class="button-group">
                <button class="btn btn-primary" @onclick="GoBack">Back</button>

                    @if (IsEventInCart()) // Om eventet redan ligger i varukorgen
                    {
                    <button id="btn-back" disabled class="btn btn-secondary">Event already in cart!</button>
                    }

                    // Om eventet är fullbokat
                    else if (selectedEvent.IsFullyBooked)
                    {
                    <button disabled class="btn btn-thirdary">SOLD OUT</button>
                    }

                    // Annars kan man klicka på lägg till i varukorgen
                    else
                    {
                    <button class="btn btn-primary" @onclick="(() => AddToCart(selectedEvent))">Add event</button>
                    }
            </div>
        </div>
    </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private EventModel? selectedEvent;
    private string currencyTitle;
    private decimal exchangeRate;

    protected override async Task OnInitializedAsync()
    {
        // Laddar cookies
        await cartService.LoadCookies();

        // Laddar rätt event man klickat in på
        selectedEvent = await eventsService.GetEventByIdAsync(Id);

        //Hämta user country
        var authState = await provider.GetAuthenticationStateAsync();
        var user = authState.User;
        string selectedCountry = await identityService.GetUserCountryAsync(user.Identity!.Name);

        if (selectedCountry != null)
        {
            //Hämta currency title från currencyService
            currencyTitle = currencyService.GetCurrencyName(selectedCountry);

            //if the method returns null exchangeRate defaults to 1
            exchangeRate = (currencyService.GetExchangeRate(selectedCountry)) ?? 1;
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    private async Task AddToCart(EventModel selectedEvent)
    {
        await cartService.AddToCartAsync(selectedEvent);
    }

    private bool IsEventInCart()
    {
        foreach (var item in cartService.GetShoppingCartItems())
        {
            if (item.Event.Id == Id)
            {
                return true;
            }
        }
        return false;
    }
}
