@page "/events"
@page "/events/{searchWord}"
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Shared;
@attribute [Authorize]
@inject IEventsService eventsService
@inject ICurrencyService currencyService
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager


@if (searchWord != null)
{
    fillButton = searchWord;
}

<div class="fullscreen">
    <div class="background"></div>
    <img src="/Events.jpg"/>
</div>

<input @oninput="FilterEvents" type="text" placeholder="Search..." value="@fillButton" />

<label for="sortSelect">Sort by:</label>
<select id="sortSelect" @onchange="SortEvents">
    <option value="">Sort by:</option>
    <option value="price low to high">Price Low to High</option>
    <option value="price high to low">Price High to Low</option>
    <option value="date ascending">Date Ascending</option>
    <option value="date descending">Date Descending</option>
</select>

@if (filteredEvents != null)
{
    <div class="row">
        @foreach (var eventToDisplay in filteredEvents)
        {
            if (eventToDisplay.IsFullyBooked)
            {
                // Här ska någon text eller färg indikera att eventet är slutsålt
                ticketsText = "SOLD OUT";
            }
            else
            {
                // Antalet biljetter kvar
                ticketsLeft = eventToDisplay.MaxCapacity - eventToDisplay.SoldTickets;
                ticketsText = ticketsLeft.ToString();
            }

            string eventImage = $"/Images/{eventToDisplay.Image}.png";
            <div class="image-container">
                <img src="@eventImage" />
                <h2>@eventToDisplay.Name</h2>
                <h3>Date: @eventToDisplay.DateTime.ToString("dddd, dd MMMM yyyy")</h3>
                <h3>Price: @eventToDisplay.TicketPrice</h3>
                <p>Tickets left: @ticketsText</p>
                <button class="btn btn-primary" @onclick="(() => ShowEvent(eventToDisplay.Id))">Read more</button>
            </div>
        }
    </div>
}

@code {

    [Parameter]
    public string? searchWord { get; set; }
    public string? fillButton;
    public int? ticketsLeft;
    public string? ticketsText;
    private string currencyTitle;

    private List<EventModel>? allEvents;
    private List<EventModel>? filteredEvents;
    private string sortType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //Hämta user country
        //Hämta currency title från currencyService

        allEvents = await eventsService.GetAllEventsAsync();

        foreach (var e in allEvents)
        {
            //kalla på metoden ConvertAmount i currencyService och skicka med landet samt ticketprice
            //sätt ticketprice till det som metoden returnerar
        }

        filteredEvents = allEvents;

    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (searchWord != null)
        {
            filteredEvents = allEvents.Where(fisk =>
                fisk.Name!.ToLower().Contains(searchWord.ToLower())
                || fisk.Location!.ToLower().Contains(searchWord.ToLower())
                || fisk.EventType!.ToLower().Contains(searchWord.ToLower())
            ).ToList();
        }

    }

    void ShowEvent(int id)
    {
        navigationManager.NavigateTo($"/eventdetails/{id}");
    }

    private void FilterEvents(ChangeEventArgs e)
    {
        filteredEvents = allEvents.Where(fisk =>
            fisk.Name!.ToLower().Contains(e.Value.ToString().ToLower())
            || fisk.Location!.ToLower().Contains(e.Value.ToString().ToLower())
            || fisk.EventType!.ToLower().Contains(e.Value.ToString().ToLower())
        ).ToList();
    }

    private void SortEvents(ChangeEventArgs e)
    {
        sortType = e.Value.ToString();

        if (sortType == "price low to high")
        {
            filteredEvents = filteredEvents.OrderBy(e => e.TicketPrice).ToList();

        }
        else if (sortType == "price high to low")
        {
            filteredEvents = filteredEvents.OrderByDescending(e => e.TicketPrice).ToList();
        }
        else if (sortType == "date ascending")
        {
            filteredEvents = filteredEvents.OrderBy(e => e.DateTime).ToList();

        }
        else if (sortType == "date descending")
        {
            filteredEvents = filteredEvents.OrderByDescending(e => e.DateTime).ToList();
        }

    }

}
