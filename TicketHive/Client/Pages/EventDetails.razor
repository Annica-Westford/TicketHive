@page "/eventdetails/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using TicketHive.Shared;
@attribute [Authorize]
@inject AuthenticationStateProvider provider
@inject IEventsService eventsService
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage
@inject CartService cartService

<button class="btn btn-primary" @onclick="(() => GoBack())">BACK</button>

<div class="container">
    <div class="row">
        <div class="col">

            @if (selectedEvent != null)
            {
                string eventImage = $"/Images/{selectedEvent.Image}.png";

                <h1>@selectedEvent.Name</h1>
                <h2>Sold tickets: @selectedEvent.SoldTickets</h2>
                <img src="@eventImage" />
                <h3>Location: @selectedEvent.Location</h3>
                <h4>Date: @selectedEvent.DateTime</h4>

                // Om eventet redan ligger i varukorgen
                if (isEventInCart)
                {
                    <button disabled class="btn btn-primary">Event already in cart!</button>
                }

                // Om eventet är fullbokat
                else if (selectedEvent.IsFullyBooked)
                {
                    <button disabled class="btn btn-primary">SOLD OUT</button>
                }

                // Annars kan man klicka på lägg till i varukorgen
                else
                {
                    <button class="btn btn-primary" @onclick="(() => AddToCart())">Add event</button>
                }

            }

        </div>
        <div class="col">
            <p>
                @selectedEvent?.Description
            </p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private EventModel? selectedEvent;
    bool isEventInCart = false;

    // Skapar kundvagnen
    private List<EventModel> shoppingCart = new List<EventModel>();

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await eventsService.GetEventByIdAsync(Id);

        // Laddar kundvagnen när sidan laddar om det finns saker i den
        var itemsJson = await localStorage.GetItemAsStringAsync("shoppingCart");
        if (!string.IsNullOrEmpty(itemsJson))
        {
            shoppingCart = JsonSerializer.Deserialize<List<EventModel>>(itemsJson);
        }

        CheckIfEventInCart();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    private async Task AddToCart()
    {
        shoppingCart.Add(selectedEvent);
        await localStorage.SetItemAsStringAsync("shoppingCart", JsonSerializer.Serialize(shoppingCart));
        cartService.CartCounterUpdate(+1);
        CheckIfEventInCart();
    }

    private void CheckIfEventInCart()
    {
        if (shoppingCart.Contains(selectedEvent))
        {
            isEventInCart = true;
        }
    }
}
