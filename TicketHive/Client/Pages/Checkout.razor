@page "/checkout"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using TicketHive.Shared;
@attribute [Authorize]
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager
@inject IEventsService eventsService
@inject ILocalStorageService localStorage
@inject ICartService cartService
@inject IIdentityService identityService
@inject ICurrencyService currencyService

<AlertMessage IsVisible="@showAlert" Message="@alertMessage" Type="@alertType" />

<div class="fullscreen">
    <div class="background"></div>
    <img src="/Events.jpg" />
</div>

@if (shoppingCart != null)
{
    if (shoppingCart.Count > 0)
    {
        <h1>Checkout</h1>

        <table class="table">
            <thead>
                <tr>
                <th>Event</th>
                    <th>Ticket Price</th>
                    <th>Quantity</th>
                    <th>Event Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in shoppingCart)
                {
                    <tr>
                        <td>
                            <h4>@item.Event.Name</h4>
                            <br><p>Tickets remaining: @(@item.Event.MaxCapacity - @item.Event.SoldTickets)</p>
                        </td>
                        <td>@decimal.Round(item.Event.TicketPrice * exchangeRate, 2) @currencyTitle</td>
                        <td>
                            <div class="quantity-container">
                                <button class="btn-quantity btn-quantity-hover-minus" @onclick="(() => cartService.DecreaseQuantity(item))">-</button>
                                @item.Quantity
                                <button class="btn-quantity btn-quantity-hover-plus" @onclick="(() => cartService.IncreaseQuantity(item))">+</button>
                            </div>
                        </td>
                        @*<td>@(item.Event.TicketPrice * item.Quantity) @currencyTitle</td>*@
                        <td>@(decimal.Round((item.Event.TicketPrice * exchangeRate * item.Quantity), 2)) @currencyTitle</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" style="text-align: right"><strong>Order Total:</strong></td>
                        @*<td>@shoppingCart.Sum(item => item.Event.TicketPrice * item.Quantity)</td>*@
                    <td>@shoppingCart.Sum(item => decimal.Round((item.Event.TicketPrice * exchangeRate * item.Quantity), 2)) @currencyTitle</td>
                </tr>
            </tfoot>
        </table>
        <div class="buttonwrapper">
			<button class="btn-primary" @onclick="(() => GoBack())">Back</button>
			<button class="btn-primary" @onclick="(() => ValidatePurchase(shoppingCart))">Complete</button>
        </div>
        

    }
    else
    {
        <p>You have emptied your cart!</p>
    }
}
else
{
    <p>You seem new here... Go add some events!</p>
}

@code {
    private List<CartItemModel>? shoppingCart;
    private bool showAlert = false;
    private string alertMessage = "";
    private string alertType = "";

    private string currencyTitle;
    private decimal exchangeRate;

    // Behöver ha inloggarens identity för att lägga till i databasen?
    private string loggedInUserUsername;

    protected override async Task OnInitializedAsync()
    {
        // Identity checkar läget så allt är chill
        var authState = await provider.GetAuthenticationStateAsync();
        loggedInUserUsername = authState.User.Identity.Name;

        // Hämtar alla items i shoppingcart
        shoppingCart = cartService.GetShoppingCartItems();

        string selectedCountry = await identityService.GetUserCountryAsync(loggedInUserUsername);

        if (selectedCountry != null)
        {
            //Hämta currency title från currencyService
            currencyTitle = currencyService.GetCurrencyName(selectedCountry);

            //if the method returns null exchangeRate defaults to 1
            exchangeRate = (currencyService.GetExchangeRate(selectedCountry)) ?? 1;
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    private async Task ValidatePurchase(List<CartItemModel> shoppingCart)
    {
        bool allItemsValidated = true;
        // Här ska alla kontroller göras innan användaren avslutar sitt köp
        foreach (var item in shoppingCart)
        {
            if (item.Event.MaxCapacity - item.Event.SoldTickets < item.Quantity)
            {
                //Finns inte tillräckligt med tickets = felmeddelande
                allItemsValidated = false;
                showAlert = true;
                alertMessage = "Not enough tickets for " + item.Event.Name + "!" + "\nYou tried to buy " + item.Quantity + " tickets but there is only " + (item.Event.MaxCapacity - item.Event.SoldTickets) + " left!";
                alertType = "danger";
            }
        }
        if (allItemsValidated)
        {
            // Kontrollen gick bra och nu läggs eventet till hos användaren
            foreach (var item in shoppingCart)
            {
                item.Event.SoldTickets += item.Quantity;
                if (item.Event.SoldTickets == item.Event.MaxCapacity)
                {
                    item.Event.IsFullyBooked = true;
                }

                EventModel? updatedEvent = await eventsService.UpdateEventAsync(item.Event);

                if (updatedEvent != null)
                {
                    bool isSuccessfullyAddedToUser = await AddEventToUser(item.Event.Id);
                    if (isSuccessfullyAddedToUser)
                    {
                        navigationManager.NavigateTo($"/confirmation");
                    }
                }
                else
                {
                    showAlert = true;
                    alertMessage = "Something went wrong...";
                    alertType = "danger";
                }
            }
            
        }
    }

    private async Task<bool> AddEventToUser(int id)
    {
        return await eventsService.AddEventToUserAsync(loggedInUserUsername, id);
    }
}
