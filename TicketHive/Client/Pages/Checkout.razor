@page "/checkout"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using TicketHive.Shared;
@attribute [Authorize]
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager
@inject IEventsService eventsService
@inject ILocalStorageService localStorage
@inject ICartService cartService

<button class="btn btn-primary" @onclick="(() => GoBack())">BACK</button>

@if (shoppingCart != null)
{
    if (shoppingCart.Count > 0)
    {
        <h1>Checkout</h1>

        <table class="table">
            <thead>
                <tr>
                <th>Event</th>
                    <th>Ticket Price</th>
                    <th>Quantity</th>
                    <th>Event Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in shoppingCart)
                {
                    <tr>
                        <td>
                            <h4>@item.Event.Name</h4>
                            <br><p>Tickets remaining: @(@item.Event.MaxCapacity - @item.Event.SoldTickets)</p>
                        </td>
                        <td>@item.Event.TicketPrice</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(() => cartService.IncreaseQuantity(item))">+</button>
                        @item.Quantity
                            <button class="btn btn-primary" @onclick="(() => cartService.DecreaseQuantity(item))">-</button>
                        </td>
                    <td>@(item.Event.TicketPrice * item.Quantity)</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" style="text-align: right"><strong>Order Total:</strong></td>
                        <td>@shoppingCart.Sum(item => item.Event.TicketPrice * item.Quantity)</td>
                </tr>
                <button class="btn btn-primary" @onclick="(() => ValidatePurchase(shoppingCart))">Purchase</button>
            </tfoot>
        </table>

    }
    else
    {
        <p>You have emptied your cart dawg.</p>
    }
}
else
{
    <p>You seem new here... Go add some events!</p>
}

@code {
    private List<CartItemModel>? shoppingCart;

    // Behöver ha inloggarens identity för att lägga till i databasen?
    private string loggedInUserUsername;

    protected override async Task OnInitializedAsync()
    {
        // Identity checkar läget så allt är chill
        var authState = await provider.GetAuthenticationStateAsync();
        loggedInUserUsername = authState.User.Identity.Name;

        // Hämtar alla items i shoppingcart
        shoppingCart = cartService.GetShoppingCartItems();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    private async Task ValidatePurchase(List<CartItemModel> shoppingCart)
    {
        // Här ska alla kontroller göras innan användaren avslutar sitt köp
        foreach (var item in shoppingCart)
        {
            if (item.Event.MaxCapacity - item.Event.SoldTickets < item.Quantity)
            {
                //Finns inte tillräckligt med tickets = felmeddelande
                break;
            }
        }

        // Kontrollen gick bra och nu läggs eventet till hos användaren
        foreach (var item in shoppingCart)
        {
            item.Event.SoldTickets += item.Quantity;
            await eventsService.UpdateEventAsync(item.Event);
            //await AddEventToUser(item.Event.Id);
        }
        navigationManager.NavigateTo($"/confirmation");
    }

    private async Task AddEventToUser(int id)
    {
        await eventsService.AddEventToUserAsync(loggedInUserUsername, id);
    }
}
