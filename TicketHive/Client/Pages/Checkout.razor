@page "/checkout"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using TicketHive.Shared;
@attribute [Authorize]
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager
@inject IEventsService eventsService
@inject ILocalStorageService localStorage
@inject ICartService cartService

<button class="btn btn-primary" @onclick="(() => GoBack())">BACK</button>

@if (shoppingCart != null)
{
    if (shoppingCart.Count > 0)
    {
        <h1>Checkout</h1>

        <table class="table">
            <thead>
                <tr>
                <th>Event</th>
                    <th>Ticket Price</th>
                    <th>Quantity</th>
                    <th>Event Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in shoppingCart)
                {
                    <tr>
                        <td>@item.Event.Name</td>
                        <td>@item.Event.TicketPrice</td>
                        <td>

                            <button class="btn btn-primary" @onclick="(() => item.Quantity++)">+</button>
                        @item.Quantity
                            <button class="btn btn-primary" @onclick="(() => DecreaseQuantity(item))">-</button>
                        </td>
                    <td>@(item.Event.TicketPrice * item.Quantity)</td>
                    </tr>
                    @*<button class="btn btn-primary" @onclick="(() => AddEventToUser(item.Id))">Purchase</button>*@
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" style="text-align: right"><strong>Order Total:</strong></td>
                        <td>@shoppingCart.Sum(item => item.Event.TicketPrice * item.Quantity)</td>
                </tr>
            </tfoot>
        </table>

    }
    else
    {
        <p>Your cart is empty dawg.</p>
    }
}
else
{
    <p>Your cart is empty dawg.</p>
}


@code {
    private List<CartItemModel>? shoppingCart;

    // Behöver ha inloggarens identity för att lägga till i databasen?
    private string loggedInUserUsername;

    protected override async Task OnInitializedAsync()
    {
        // Identity checkar läget så allt är chill
        var authState = await provider.GetAuthenticationStateAsync();
        loggedInUserUsername = authState.User.Identity.Name;

        // Detta är gamla shoppingCart. Nya ska bara sätta shoppingCart till GetShoppingCartItems()?
        shoppingCart = cartService.GetShoppingCartItems();
    }

    private void UpdateCartItems()
    {
        shoppingCart = cartService.GetShoppingCartItems();
    }

    // Samma som ovan, fast ta bort item
    private void DecreaseQuantity(CartItemModel cartItem)
    {
        if (cartItem.Quantity > 1)
        {
            cartItem.Quantity--;
        }
        else
        {
            cartService.RemoveFromCartAsync(cartItem);
        }
    }

    // Denna metoden kan kalla på typ UpdateCart i CartService för att uppdatera cookie med quantity utan att lägga till något nytt event, OM quantity verkligen ska sparas
    private async Task SaveCart()
    {
        var itemsJson = JsonSerializer.Serialize(shoppingCart);
        await localStorage.SetItemAsStringAsync("shoppingCart", itemsJson);
        StateHasChanged();
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    // När man trycker på köpknappen. Avaktiverad så att vi inte gör kaos i databasen
    private async Task AddEventToUser(int id)
    {
        //await eventsService.AddEventToUserAsync(loggedInUserUsername, id);
        //shoppingCart.Clear();
        //SaveCart();
    }
}
