@page "/eventdetails/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using TicketHive.Shared;
@attribute [Authorize]
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager
@inject IEventsService eventsService
@inject ILocalStorageService localStorage
@inject ICartService cartService

<button class="btn btn-primary" @onclick="(() => GoBack())">BACK</button>

<div class="container">
    <div class="row">
        <div class="col">

            @if (selectedEvent != null)
            {
                string eventImage = $"/Images/{selectedEvent.Image}.png";

                <h1>@selectedEvent.Name</h1>
                <h2>@selectedEvent.EventType</h2>
                <img src="@eventImage" />
                <h3>Location: @selectedEvent.Location</h3>
                <h4>Date: @selectedEvent.DateTime</h4>
                <h4>Tickets available: @(@selectedEvent.MaxCapacity - @selectedEvent.SoldTickets) / @selectedEvent.MaxCapacity</h4>

                // Om eventet redan ligger i varukorgen
                // Här ska även läggas till att kolla om usern redan köpt biljett, då ska man inte heller kunna lägga till i varukorg
                if (IsEventInCart())
                {
                    <button disabled class="btn btn-primary">Event added in cart!</button>
                }

                // Om eventet är fullbokat
                else if (selectedEvent.IsFullyBooked)
                {
                    <button disabled class="btn btn-primary">SOLD OUT</button>
                }

                // Annars kan man klicka på lägg till i varukorgen
                else
                {
                    <button class="btn btn-primary" @onclick="(() => AddToCart(selectedEvent))">Add event</button>
                }

            }

        </div>
        <div class="col">
            <p>
                @selectedEvent?.Description
            </p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private EventModel? selectedEvent;

    protected override async Task OnInitializedAsync()
    {
        // Laddar cookies
        await cartService.LoadCookies();

        // Laddar rätt event man klickat in på
        selectedEvent = await eventsService.GetEventByIdAsync(Id);
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    private async Task AddToCart(EventModel selectedEvent)
    {
        await cartService.AddToCartAsync(selectedEvent);
    }

    private bool IsEventInCart()
    {
        foreach (var item in cartService.GetShoppingCartItems())
        {
            if (item.Event.Id == Id)
            {
                return true;
            }
        }
        return false;
    }
}
