@page "/admin"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]
@inject IEventsService eventsService
@inject IJSRuntime jsRuntime

<AlertMessage IsVisible="@showAlert" Message="@alertMessage" Type="@alertType" />

<div class="fullscreen">
    <div class="background"></div>
    <img src="/Events.jpg" />
</div>

<h3>Admin</h3>

<EditForm Model="newEvent" OnValidSubmit="AddEvent" id="form">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div id="">
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="newEvent.Name" class="form-control"></InputText>
        <ValidationMessage For="() => newEvent.Name" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="newEvent.Description" class="form-control"></InputTextArea>
        <ValidationMessage For="() => newEvent.Description" />
    </div>

    <div class="form-group">
        <label for="eventType">Event Type:</label>
        <InputText id="eventType" @bind-Value="newEvent.EventType" class="form-control"></InputText>
        <ValidationMessage For="() => newEvent.EventType" />
    </div>

    <div class="form-group">
        <label for="location">Location:</label>
        <InputText id="location" @bind-Value="newEvent.Location" class="form-control"></InputText>
        <ValidationMessage For="() => newEvent.Location" />
    </div>

    <div class="form-group">
        <label for="dateTime">Date and Time:</label>
        <input type="datetime-local" id="dateTime" @bind-value="@newEvent.DateTime" class="form-control"
               min="@DateTime.Today.ToString("yyyy-MM-ddTHH:mm")"></input>
    </div>    

    <div class="form-group">
        <label for="ticketPrice">Ticket Price:</label>
        <InputNumber id="ticketPrice" @bind-Value="newEvent.TicketPrice" class="form-control"></InputNumber>
        <ValidationMessage For="() => newEvent.TicketPrice" />
    </div>

    <div class="form-group">
        <label for="maxAttendees">Max attendees:</label>
        <InputNumber id="maxAttendees" @bind-Value="newEvent.MaxCapacity" class="form-control"></InputNumber>
        <ValidationMessage For="() => newEvent.MaxCapacity" />
    </div>
        <div id="center">
    <button type="submit" class="btn btn-primary">Add Event</button>
    </div>
    </div>
</EditForm>

<div id="center">



<select @bind="selectedItemId">
    <option value=""></option>
    @if (allEvents != null)
    {
        foreach (var item in allEvents)
        {
            <option value="@item.Id">@item.Name</option>
        }
    }
</select>

<button @onclick="() => DeleteEvent(selectedItemId)">Delete Event</button>
</div>

<style>
    #form {
        padding: 30px;
        background-color: rgba(48, 80, 118, 0.8);
        color: white;
        max-width: 600px;
        margin: 0 auto;
    }

    .fullscreen img {
        object-fit: cover;
        width: 100vw;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        z-index: -1;
    }

    .fullscreen .background {
        background-color: #fbe89c;
        object-fit: cover;
        width: 100vw;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        z-index: -1;
    }

    h3 {
        text-align: center;  
        color: white;
    }

    #center {
        display: flex;
        margin-top: 10px;
        justify-content: center;
    }
</style>

@code {
    private List<EventModel> allEvents;
    private int selectedItemId;
    private EventModel newEvent = new() { DateTime = DateTime.Now };
    private bool showAlert = false;
    private string alertMessage;
    private string alertType;

    protected override async Task OnInitializedAsync()
    {
        allEvents = await eventsService.GetAllEventsAsync();

        //EventModel testEvent = new()
        //{
        //    Name = "Blih",
        //    EventType = "Cinema",
        //    Location = "Malmö",
        //    DateTime = DateTime.Now,
        //    TicketPrice = 200m,
        //    MaxCapacity = 300
        //};

        //await eventsService.AddEventAsync(testEvent);

    }

    private async Task AddEvent()
    {
        showAlert = true;

        //Add random image to event
        newEvent.Image = $"image-{new Random().Next(1, 27)}";

        bool isAddedSuccessfullyEvent = await eventsService.AddEventAsync(newEvent);

        if (isAddedSuccessfullyEvent)
        {
            alertMessage = newEvent.Name + " has been successfully added to the events!";
            alertType = "success";

            allEvents.Add(newEvent);

            //clear input fields
            newEvent = new() { DateTime = DateTime.Now };
        }
        else
        {
            alertMessage = "Something went wrong...";
            alertType = "danger";
        }
    }

    private async Task DeleteEvent(int id)
    {
        if (allEvents != null && await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?"))
        {
            showAlert = true;
            alertMessage =  "Event has been removed from the database!";
            alertType = "danger";
            await eventsService.DeleteEventAsync(id);
            allEvents.RemoveAll(item => item.Id == id);
        }

        
    }
}
