@page "/account"
@using Microsoft.AspNetCore.Authorization;
@using System.ComponentModel.DataAnnotations;
@attribute [Authorize]
@inject IIdentityService identityService
@inject AuthenticationStateProvider authStateProvider

<h3>Account</h3>
<h2>Change Password</h2>

<AlertMessage IsVisible="@showAlert" Message="@alertMessage" Type="@alertType"/>

<EditForm Model="changePassword" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="currentPassword">Current Password</label>
        <InputText id="currentPassword" @bind-Value="changePassword.CurrentPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="() => changePassword.CurrentPassword" />
    </div>
    <div class="form-group">
        <label for="newPassword">New Password</label>
        <InputText id="newPassword" @bind-Value="changePassword.NewPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="() => changePassword.NewPassword" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="changePassword.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="() => changePassword.ConfirmPassword" />
    </div>
    <button type="submit" class="btn btn-primary">Change Password</button>
</EditForm>

@code {
    private ChangePasswordModel changePassword = new();
    private bool showAlert = false;
    private string alertMessage;
    private string alertType;

    private async Task HandleValidSubmit()
    {
        showAlert = true;

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userName = user.Identity!.Name;

        if (userName != null)
        {            
            bool hasChangedPasswordSuccessfully = await identityService.ChangePasswordAsync(userName, changePassword.CurrentPassword, changePassword.NewPassword);

            if (hasChangedPasswordSuccessfully)
            {
                //Clear input fields
                changePassword = new();

                alertMessage = "Password changed successfully!";
                alertType = "success";

                //behöver förmodligen lägga till detta i repo/controller/service
                //await SignInManager.RefreshSignInAsync(user);
            }
            else
            {
                alertMessage = "Failed to change the password";
                alertType = "danger";
            }
        }
        else
        {
            alertMessage = "Oh no! Something went wrong...";
            alertType = "danger";
        }
    }
}
