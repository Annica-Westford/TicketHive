@page "/eventdetails/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Shared;
@attribute [Authorize]
@inject IEventsService eventsService
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage

<button class="btn btn-primary" @onclick="(() => GoBack())">BACK</button>


<div class="container">
    <div class="row">
        <div class="col">
            @if (selectedEvent != null)
            {
                string eventImage = $"/Images/{selectedEvent.Image}.png";

                <h1>@selectedEvent.Name</h1>
                <h2>Sold tickets: @selectedEvent.SoldTickets</h2>
                <img src="@eventImage" />
                <h3>Location: @selectedEvent.Location</h3>
                <h4>Date: @selectedEvent.DateTime</h4>
                <p>@selectedEvent.Description</p>               
                if (selectedEvent.IsFullyBooked)
                {
                    disableCartButton = true;
                }

                <button disabled="@disableCartButton" class="btn btn-primary" @onclick="(() => AddToCart())">Add to cart</button>

            }
            else
            {
                <h1>ERROR 101 KAOS. ABBE LÖS</h1>
            }

        </div>
        <div class="col">
            <p>
                @selectedEvent?.Description
            </p>
        </div>
    </div>
</div>

@*@if (selectedEvent != null)
{
    string eventImage = $"/Images/{selectedEvent.Image}.png";

    <h1>@selectedEvent.Name</h1>
    <h2>Sold tickets: @selectedEvent.SoldTickets</h2>
    <img src="@eventImage" />
    <h3>Location: @selectedEvent.Location</h3>
    <h4>Date: @selectedEvent.DateTime</h4>
    <p>@selectedEvent.Description</p>

    if (selectedEvent.IsFullyBooked)
    {
        disableCartButton = true;
    }
    else
    {
        disableCartButton = false;
    }

    <button disabled="@disableCartButton" class="btn btn-primary" @onclick="(() => AddToCart())">Add to cart</button>

}
else
{
    <h1>ERROR 101 KAOS. ABBE LÖS</h1>
}*@


@code {
    [Parameter]
    public int Id { get; set; }
    private EventModel? selectedEvent;
    bool disableCartButton;
    private List<int>? shoppingCartItems;

    protected override async Task OnInitializedAsync()
    {
        selectedEvent = await eventsService.GetEventByIdAsync(Id);
    }

    private void GoBack()
    {
        navigationManager.NavigateTo($"/events");
    }

    private async Task AddToCart()
    {
        // här ska eventet läggas till i cart
        //efter varje tillagt event måste man kolla om eventet har uppnåt max capacity
        // om man uppnått max capacity så ska eventets button bli disabled
        selectedEvent.SoldTickets++;

        shoppingCartItems = await localStorage.GetItemAsync<List<int>>("shoppingCartItems");

        if (shoppingCartItems == null)
        {
            shoppingCartItems = new List<int>();
        }

        shoppingCartItems.Add(selectedEvent.Id);
        
        await localStorage.SetItemAsync("shoppingCartItems", shoppingCartItems);

        if (selectedEvent.SoldTickets >= selectedEvent.MaxCapacity)
        {
            //Detta måste sparas i databasen, annars visas fel info på alla andra sidor
            //Betyder att om användaren inte genomför en bokning måste det ändras tillbaka igen i databasen
            selectedEvent.IsFullyBooked = true;
        }
    }
}
