@page "/home"
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Shared;
@attribute [Authorize]
@inject IEventsService eventsService 
@inject AuthenticationStateProvider provider
@inject NavigationManager navigationManager

<div>
    <input type="text" @bind-value="@searchWord" placeholder="Keyword" />

    <button class="btn btn-primary" @onclick="@(() => SearchForEvent())">Search</button>
</div>


@if (eventsBought != null)
{
    <h1>Events you are attending:</h1>

    foreach (var eventBought in eventsBought)
    {
        <h3>@eventBought.Name</h3>
    }
}


<h1>Most popular events:</h1>

@if (popularEvents != null)
{
    <div class="row">
        @foreach (var eventToDisplay in popularEvents)
    {
        string eventImage = $"/Images/{eventToDisplay.Image}.png";
        <div class="image-container">
        <h3>@eventToDisplay.Name</h3>
        <img src="@eventImage"/>
        <button class="btn btn-primary" @onclick="(() => ShowEvent(eventToDisplay.Id))">Read more</button>
        </div>
    }
    </div>
}

@code {

    private List<EventModel>? popularEvents;
    private List<EventModel>? eventsBought;
    private string searchWord;

    protected override async Task OnInitializedAsync()
    {
        // Hämtar alla populära events, sorterar dom och visar top 3 baserat på sålda biljetter
        List<EventModel> allEvents = await eventsService.GetAllEventsAsync();
        List<EventModel> sortedPopularEvents = allEvents.OrderByDescending(s => s.SoldTickets).ToList();
        popularEvents = sortedPopularEvents.Take(3).ToList();

        // Hämtar alla events som användaren har biljetter till
        var authState = await provider.GetAuthenticationStateAsync();
        var name = authState.User.Identity.Name;
        eventsBought = await eventsService.GetAllEventsFromUserAsync(name);

    }

    void ShowEvent(int id)
    {
        navigationManager.NavigateTo($"/eventdetails/{id}");
    }

    void SearchForEvent()
    {
        navigationManager.NavigateTo($"/events/{searchWord}");
    }
}
